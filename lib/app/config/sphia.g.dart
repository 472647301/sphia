// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'sphia.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

SphiaConfig _$SphiaConfigFromJson(Map<String, dynamic> json) => SphiaConfig(
      startOnBoot: json['startOnBoot'] as bool,
      autoRunServer: json['autoRunServer'] as bool,
      useMaterial3: json['useMaterial3'] as bool,
      navigationStyle: json['navigationStyle'] as int,
      darkMode: json['darkMode'] as bool,
      themeColor: json['themeColor'] as int,
      showAddress: json['showAddress'] as bool,
      enableStatistics: json['enableStatistics'] as bool,
      enableSpeedChart: json['enableSpeedChart'] as bool,
      updateSubscribeInterval: json['updateSubscribeInterval'] as int,
      updateThroughProxy: json['updateThroughProxy'] as bool,
      userAgent: json['userAgent'] as int,
      autoGetIp: json['autoGetIp'] as bool,
      autoConfigureSystemProxy: json['autoConfigureSystemProxy'] as bool,
      multiOutboundSupport: json['multiOutboundSupport'] as bool,
      enableTun: json['enableTun'] as bool,
      socksPort: json['socksPort'] as int,
      httpPort: json['httpPort'] as int,
      mixedPort: json['mixedPort'] as int,
      listen: json['listen'] as String,
      enableUdp: json['enableUdp'] as bool,
      authentication: json['authentication'] as bool,
      user: json['user'] as String,
      password: json['password'] as String,
      coreApiPort: json['coreApiPort'] as int,
      enableSniffing: json['enableSniffing'] as bool,
      configureDns: json['configureDns'] as bool,
      remoteDns: json['remoteDns'] as String,
      directDns: json['directDns'] as String,
      domainStrategy: json['domainStrategy'] as int,
      domainMatcher: json['domainMatcher'] as int,
      enableCoreLog: json['enableCoreLog'] as bool,
      logLevel: json['logLevel'] as int,
      maxLogCount: json['maxLogCount'] as int,
      saveCoreLog: json['saveCoreLog'] as bool,
      routingProvider: json['routingProvider'] as int,
      vmessProvider: json['vmessProvider'] as int,
      vlessProvider: json['vlessProvider'] as int,
      shadowsocksProvider: json['shadowsocksProvider'] as int,
      trojanProvider: json['trojanProvider'] as int,
      hysteriaProvider: json['hysteriaProvider'] as int,
      additionalSocksPort: json['additionalSocksPort'] as int,
      tunProvider: json['tunProvider'] as int,
      enableIpv4: json['enableIpv4'] as bool,
      ipv4Address: json['ipv4Address'] as String,
      enableIpv6: json['enableIpv6'] as bool,
      ipv6Address: json['ipv6Address'] as String,
      mtu: json['mtu'] as int,
      endpointIndependentNat: json['endpointIndependentNat'] as bool,
      stack: json['stack'] as int,
      autoRoute: json['autoRoute'] as bool,
      strictRoute: json['strictRoute'] as bool,
    );

Map<String, dynamic> _$SphiaConfigToJson(SphiaConfig instance) =>
    <String, dynamic>{
      'startOnBoot': instance.startOnBoot,
      'autoRunServer': instance.autoRunServer,
      'useMaterial3': instance.useMaterial3,
      'navigationStyle': instance.navigationStyle,
      'darkMode': instance.darkMode,
      'themeColor': instance.themeColor,
      'showAddress': instance.showAddress,
      'enableStatistics': instance.enableStatistics,
      'enableSpeedChart': instance.enableSpeedChart,
      'updateSubscribeInterval': instance.updateSubscribeInterval,
      'updateThroughProxy': instance.updateThroughProxy,
      'userAgent': instance.userAgent,
      'autoGetIp': instance.autoGetIp,
      'autoConfigureSystemProxy': instance.autoConfigureSystemProxy,
      'multiOutboundSupport': instance.multiOutboundSupport,
      'enableTun': instance.enableTun,
      'socksPort': instance.socksPort,
      'httpPort': instance.httpPort,
      'mixedPort': instance.mixedPort,
      'listen': instance.listen,
      'enableUdp': instance.enableUdp,
      'authentication': instance.authentication,
      'user': instance.user,
      'password': instance.password,
      'coreApiPort': instance.coreApiPort,
      'enableSniffing': instance.enableSniffing,
      'configureDns': instance.configureDns,
      'remoteDns': instance.remoteDns,
      'directDns': instance.directDns,
      'domainStrategy': instance.domainStrategy,
      'domainMatcher': instance.domainMatcher,
      'enableCoreLog': instance.enableCoreLog,
      'logLevel': instance.logLevel,
      'maxLogCount': instance.maxLogCount,
      'saveCoreLog': instance.saveCoreLog,
      'routingProvider': instance.routingProvider,
      'vmessProvider': instance.vmessProvider,
      'vlessProvider': instance.vlessProvider,
      'shadowsocksProvider': instance.shadowsocksProvider,
      'trojanProvider': instance.trojanProvider,
      'hysteriaProvider': instance.hysteriaProvider,
      'additionalSocksPort': instance.additionalSocksPort,
      'tunProvider': instance.tunProvider,
      'enableIpv4': instance.enableIpv4,
      'ipv4Address': instance.ipv4Address,
      'enableIpv6': instance.enableIpv6,
      'ipv6Address': instance.ipv6Address,
      'mtu': instance.mtu,
      'endpointIndependentNat': instance.endpointIndependentNat,
      'stack': instance.stack,
      'autoRoute': instance.autoRoute,
      'strictRoute': instance.strictRoute,
    };
